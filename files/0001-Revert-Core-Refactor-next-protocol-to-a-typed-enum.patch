From ea308fd8732c9dde0711cd49198caeab0668216c Mon Sep 17 00:00:00 2001
From: Joshua Strobl <joshua@streambits.io>
Date: Mon, 15 Jun 2020 19:51:29 +0300
Subject: [PATCH 1/1] Revert "[Core] Refactor next protocol to a typed enum."

This reverts commit 0520ec20d12217541607e09e5d9101f49ec16bb0.
---
 dcpp/BufferedSocket.cpp | 4 ++--
 dcpp/BufferedSocket.h   | 4 ++--
 dcpp/Client.cpp         | 2 +-
 dcpp/Client.h           | 4 ++--
 dcpp/CryptoManager.cpp  | 2 +-
 dcpp/CryptoManager.h    | 2 +-
 dcpp/SSLSocket.cpp      | 2 +-
 dcpp/SSLSocket.h        | 4 ++--
 dcpp/Socket.cpp         | 2 +-
 dcpp/Socket.h           | 6 +++---
 10 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/dcpp/BufferedSocket.cpp b/dcpp/BufferedSocket.cpp
index 5596894f..08bd0904 100644
--- a/dcpp/BufferedSocket.cpp
+++ b/dcpp/BufferedSocket.cpp
@@ -100,11 +100,11 @@ void BufferedSocket::accept(const Socket& srv, bool secure, bool allowUntrusted)
     addTask(ACCEPTED, 0);
 }
 
-void BufferedSocket::connect(const string& aAddress, const string& aPort, bool secure, bool allowUntrusted, bool proxy, Socket::Protocol proto, const string& expKP) {
+void BufferedSocket::connect(const string& aAddress, const string& aPort, bool secure, bool allowUntrusted, bool proxy, int proto, const string& expKP) {
     connect(aAddress, aPort, Util::emptyString, NAT_NONE, secure, allowUntrusted, proxy, proto, expKP);
 }
 
-void BufferedSocket::connect(const string& aAddress, const string& aPort, const string& localPort, NatRoles natRole, bool secure, bool allowUntrusted, bool proxy, Socket::Protocol proto, const string& expKP) {
+void BufferedSocket::connect(const string& aAddress, const string& aPort, const string& localPort, NatRoles natRole, bool secure, bool allowUntrusted, bool proxy, int proto, const string& expKP) {
     (void)expKP;
     dcdebug("BufferedSocket::connect() %p\n", (void*)this);
     std::unique_ptr<Socket> s(secure ? (natRole == NAT_SERVER ? CryptoManager::getInstance()->getServerSocket(allowUntrusted) : CryptoManager::getInstance()->getClientSocket(allowUntrusted, proto)) : new Socket);
diff --git a/dcpp/BufferedSocket.h b/dcpp/BufferedSocket.h
index 0a540c82..32fb3a0c 100644
--- a/dcpp/BufferedSocket.h
+++ b/dcpp/BufferedSocket.h
@@ -74,8 +74,8 @@ public:
     }
 
     void accept(const Socket& srv, bool secure, bool allowUntrusted);
-    void connect(const string& aAddress, const string& aPort, bool secure, bool allowUntrusted, bool proxy, Socket::Protocol proto, const string& expKP = Util::emptyString);
-    void connect(const string& aAddress, const string& aPort, const string& localPort, NatRoles natRole, bool secure, bool allowUntrusted, bool proxy, Socket::Protocol proto, const string& expKP = Util::emptyString);
+    void connect(const string& aAddress, const string& aPort, bool secure, bool allowUntrusted, bool proxy, int proto, const string& expKP = Util::emptyString);
+    void connect(const string& aAddress, const string& aPort, const string& localPort, NatRoles natRole, bool secure, bool allowUntrusted, bool proxy, int proto, const string& expKP = Util::emptyString);
 
     /** Sets data mode for aBytes bytes. Must be called within onLine. */
     void setDataMode(int64_t aBytes = -1) { mode = MODE_DATA; dataBytes = aBytes; }
diff --git a/dcpp/Client.cpp b/dcpp/Client.cpp
index b36221d2..9779ba39 100644
--- a/dcpp/Client.cpp
+++ b/dcpp/Client.cpp
@@ -32,7 +32,7 @@ namespace dcpp {
 
 Client::Counts Client::counts;
 
-Client::Client(const string& hubURL, char separator_, bool secure_, Socket::Protocol proto_) :
+Client::Client(const string& hubURL, char separator_, bool secure_, int proto_) :
     myIdentity(ClientManager::getInstance()->getMe(), 0),
     reconnDelay(120), lastActivity(GET_TICK()), registered(false), autoReconnect(false),
     encoding(Text::hubDefaultCharset), state(STATE_DISCONNECTED), sock(0),
diff --git a/dcpp/Client.h b/dcpp/Client.h
index cd326f34..efa61fe6 100644
--- a/dcpp/Client.h
+++ b/dcpp/Client.h
@@ -163,7 +163,7 @@ public:
     void reloadSettings(bool updateNick);
 protected:
     friend class ClientManager;
-    Client(const string& hubURL, char separator, bool secure_, Socket::Protocol proto_);
+    Client(const string& hubURL, char separator, bool secure_, int proto_);
     virtual ~Client();
     struct Counts {
     private:
@@ -227,7 +227,7 @@ private:
     string port;
     string externalIP;
     char separator;
-    Socket::Protocol proto;
+    int  proto;
     bool secure;
     CountType countType;
 };
diff --git a/dcpp/CryptoManager.cpp b/dcpp/CryptoManager.cpp
index 86ec6585..5da03c65 100644
--- a/dcpp/CryptoManager.cpp
+++ b/dcpp/CryptoManager.cpp
@@ -391,7 +391,7 @@ void CryptoManager::loadKeyprint(const string& file) noexcept {
     keyprint = ssl::X509_digest(x509, EVP_sha256());
 }
 
-SSLSocket* CryptoManager::getClientSocket(bool allowUntrusted, Socket::Protocol proto) {
+SSLSocket* CryptoManager::getClientSocket(bool allowUntrusted, int proto) {
     return new SSLSocket(allowUntrusted ? clientContext : clientVerContext, proto);
 }
 SSLSocket* CryptoManager::getServerSocket(bool allowUntrusted) {
diff --git a/dcpp/CryptoManager.h b/dcpp/CryptoManager.h
index bbf25a8b..cb02095a 100644
--- a/dcpp/CryptoManager.h
+++ b/dcpp/CryptoManager.h
@@ -43,7 +43,7 @@ public:
 
     void decodeBZ2(const uint8_t* is, size_t sz, string& os);
 
-    SSLSocket* getClientSocket(bool allowUntrusted, Socket::Protocol proto);
+    SSLSocket* getClientSocket(bool allowUntrusted, int proto);
     SSLSocket* getServerSocket(bool allowUntrusted);
 
     void loadCertificates() noexcept;
diff --git a/dcpp/SSLSocket.cpp b/dcpp/SSLSocket.cpp
index 50d57b4d..58e630e2 100644
--- a/dcpp/SSLSocket.cpp
+++ b/dcpp/SSLSocket.cpp
@@ -36,7 +36,7 @@ static const unsigned char alpn_protos_adc[] = {
 };
 #endif
 
-SSLSocket::SSLSocket(SSL_CTX* context, Socket::Protocol proto) : ctx(context), ssl(0), nextProto(proto) {
+SSLSocket::SSLSocket(SSL_CTX* context, int proto) : ctx(context), ssl(0), nextProto(proto) {
 
 }
 
diff --git a/dcpp/SSLSocket.h b/dcpp/SSLSocket.h
index 65bec121..f9bd7658 100644
--- a/dcpp/SSLSocket.h
+++ b/dcpp/SSLSocket.h
@@ -71,13 +71,13 @@ public:
 private:
     friend class CryptoManager;
 
-    SSLSocket(SSL_CTX* context, Socket::Protocol proto);
+    SSLSocket(SSL_CTX* context, int proto);
     SSLSocket(const SSLSocket&);
     SSLSocket& operator=(const SSLSocket&);
 
     SSL_CTX* ctx;
     ssl::SSL ssl;
-    Socket::Protocol nextProto;
+    int nextProto;
 
     int checkSSL(int ret);
     bool waitWant(int ret, uint32_t millis);
diff --git a/dcpp/Socket.cpp b/dcpp/Socket.cpp
index c6186a9f..4c4ed703 100644
--- a/dcpp/Socket.cpp
+++ b/dcpp/Socket.cpp
@@ -736,7 +736,7 @@ string Socket::getLocalPort() noexcept {
     return Util::emptyString;
 }
 
-Socket::Protocol Socket::getNextProtocol() noexcept {
+int Socket::getNextProtocol() noexcept {
     return proto;
 }
 
diff --git a/dcpp/Socket.h b/dcpp/Socket.h
index 82de19e5..ef8cef58 100644
--- a/dcpp/Socket.h
+++ b/dcpp/Socket.h
@@ -71,7 +71,7 @@ public:
         TYPE_UDP
     };
 
-    enum Protocol {
+    enum {
         PROTO_DEFAULT = 0,
         PROTO_NMDC = 1,
         PROTO_ADC = 2
@@ -149,7 +149,7 @@ public:
     string getLocalIp() noexcept;
     string getLocalPort() noexcept;
 
-    Protocol getNextProtocol() noexcept;
+    int getNextProtocol() noexcept;
 
     // Low level interface
     virtual void create(int aType = TYPE_TCP);
@@ -178,7 +178,7 @@ public:
 protected:
     int type;
     bool connected;
-    Protocol proto;
+    int proto;
 
     class Stats {
     public:
-- 
2.27.0

